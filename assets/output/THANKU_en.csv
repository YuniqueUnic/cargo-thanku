
name,description,dependency_kind,crates_link,source_link,stats,status
anyhow,Flexible concrete Error type built on std::error::Error,Normal,[anyhow](https://crates.io/crates/anyhow),[GitHub](https://github.com/dtolnay/anyhow),❓,✅
cargo_metadata,structured access to the output of `cargo metadata`,Normal,[cargo_metadata](https://crates.io/crates/cargo_metadata),[GitHub](https://github.com/oli-obk/cargo_metadata),❓,✅
clap,A simple to use; efficient; and full-featured Command Line Argument Parser,Normal,[clap](https://crates.io/crates/clap),[GitHub](https://github.com/clap-rs/clap),❓,✅
clap_complete,Generate shell completion scripts for your clap::Command,Normal,[clap_complete](https://crates.io/crates/clap_complete),[GitHub](https://github.com/clap-rs/clap),❓,✅
futures,An implementation of futures and streams featuring zero allocations; composability; and iterator-like interfaces.,Normal,[futures](https://crates.io/crates/futures),[GitHub](https://github.com/rust-lang/futures-rs),❓,✅
reqwest,higher level HTTP client library,Normal,[reqwest](https://crates.io/crates/reqwest),[GitHub](https://github.com/seanmonstar/reqwest),❓,✅
rust-i18n,Rust I18n is use Rust codegen for load YAML file storage translations on compile time; and give you a t! macro for simply get translation texts.,Normal,[rust-i18n](https://crates.io/crates/rust-i18n),[GitHub](https://github.com/longbridge/rust-i18n),❓,✅
serde,A generic serialization/deserialization framework,Normal,[serde](https://crates.io/crates/serde),[GitHub](https://github.com/serde-rs/serde),❓,✅
serde_json,A JSON serialization file format,Normal,[serde_json](https://crates.io/crates/serde_json),[GitHub](https://github.com/serde-rs/json),❓,✅
serde_yaml,YAML data format for Serde,Normal,[serde_yaml](https://crates.io/crates/serde_yaml),[GitHub](https://github.com/dtolnay/serde-yaml),❓,✅
strsim,Implementations of string similarity metrics. Includes Hamming; Levenshtein; OSA; Damerau-Levenshtein; Jaro; Jaro-Winkler; and Sørensen-Dice.,Normal,[strsim](https://crates.io/crates/strsim),[GitHub](https://github.com/rapidfuzz/strsim-rs),❓,✅
thiserror,derive(Error),Normal,[thiserror](https://crates.io/crates/thiserror),[GitHub](https://github.com/dtolnay/thiserror),❓,✅
tokio,An event-driven; non-blocking I/O platform for writing asynchronous I/O backed applications.,Normal,[tokio](https://crates.io/crates/tokio),[GitHub](https://github.com/tokio-rs/tokio),❓,✅
toml,A native Rust encoder and decoder of TOML-formatted files and streams. Provides implementations of the standard Serialize/Deserialize traits for TOML data to facilitate deserializing and serializing Rust structures.,Normal,[toml](https://crates.io/crates/toml),[GitHub](https://github.com/toml-rs/toml),❓,✅
tracing,Application-level tracing for Rust.,Normal,[tracing](https://crates.io/crates/tracing),[GitHub](https://github.com/tokio-rs/tracing),❓,✅
tracing-subscriber,Utilities for implementing and composing `tracing` subscribers.,Normal,[tracing-subscriber](https://crates.io/crates/tracing-subscriber),[GitHub](https://github.com/tokio-rs/tokio),❓,✅
url,URL library for Rust; based on the WHATWG URL Standard,Normal,[url](https://crates.io/crates/url),[GitHub](https://github.com/servo/rust-url),❓,✅
assert_fs,Filesystem fixtures and assertions for testing.,Development,[assert_fs](https://crates.io/crates/assert_fs),[GitHub](https://github.com/assert-rs/assert_fs.git),❓,✅
pretty_assertions,Overwrite `assert_eq!` and `assert_ne!` with drop-in replacements; adding colorful diffs.,Development,[pretty_assertions](https://crates.io/crates/pretty_assertions),[GitHub](https://github.com/rust-pretty-assertions/rust-pretty-assertions),❓,✅
tokio-test,Testing utilities for Tokio- and futures-based code,Development,[tokio-test](https://crates.io/crates/tokio-test),[GitHub](https://github.com/tokio-rs/tokio),❓,✅
